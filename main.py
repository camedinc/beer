# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RM3GN302vt47d62zd8sKlsL2XgXhzu-C
"""

# Monta Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Ruta a notebooks
!ls '/content/drive/MyDrive/Colab Notebooks/Modelos/proyecto_recomendacion_FC/clases.ipynb'

# Commented out IPython magic to ensure Python compatibility.
# ruta a los notebooks de clases
# %run '/content/drive/MyDrive/Colab Notebooks/Modelos/proyecto_recomendacion_FC/clases.ipynb'
# %run '/content/drive/MyDrive/Colab Notebooks/Modelos/proyecto_recomendacion_FC/funciones.ipynb'

# Construye la ruta a la data
!ls '/content/drive/MyDrive/Colab Notebooks/Data/movielens dataset'

# Define la ruta a los archivos ruta_base
ruta_base = '/content/drive/MyDrive/Colab Notebooks/Data/movielens dataset'

# Define una instancia de la clase y carga los datos
cargador = CargadorDatos(ruta_base)
print('Instancia creada')
df_movies, df_ratings = cargador.carga_data()
print('Datos cargados correctamente!')

# Define una instancia de la clase y une las bases
depurador = DepuradorDatos(df_movies, df_ratings)
print('Instancia creada')
df = depurador.merge_data()
print('Bases unidas correctamente!')

# Retorna nombre de columnas del dataset consolidado
print('\nNombre de columnas:')
print(depurador.nombre_columnas())

# Retorna la dimensión del dataset consolidado
print('\nDimensión:')
print(depurador.dimensiones_data())

# Retorna ids únicos del dataset consolidado
print('\nIds únicos:')
movieId, userId = depurador.ids_unicos()
print("MovieId únicos", movieId)
print("userId únicos", userId)

# Retorna el total de nas del dataset consolidado
n_nas = depurador.count_nas()
print('\nTotal de nas:')
print(n_nas)

# Elimina nas
df = depurador.elimina_nas()
print('\nNAs emininados!')

# Retorna el total de duplicados
n_duplicados = depurador.count_duplicados()
print('\nTotal de duplicados:')
print(n_duplicados)

# Elimina valores duplicados
df = depurador.elimina_duplicados()
print('\nDuplicados eliminados!')

# Genera un histograma de la variable 'rating'
grafica = GenerarGrafica()
grafica.histograma(df, 'rating')

# Verifica normalidad de 'rating' (Test Anderson-Darling)
test = Test(df)
values = test.normalidad('rating')
print(values)

# Selecciona las variables relevantes del modelo
modelo = Modelo(df)
df_modelo = modelo.variables_relevantes('movieId','userId','rating')
print('\nVariables seleccionadas:')
print(df_modelo)

# Genera el reader, scale y data
scale = (0.5, 5.0)
modelo.reader(scale)
print('\nReader y data creados!')

# Set de entrenamiento y prueba
trainset, testset = modelo.train_test_split(0.2, 2024)
print('\nSet de entrenamiento y prueba creados')
print(trainset)
print(testset)

# Entrena el modelo FC
modelo_entrenado = modelo.model_training()
print('\nModelo entrenado!')

# Recomendaciones
recomendaciones = modelo.model_predictions()
print('\nRecomendaciones:')
print(recomendaciones)

# Añade información complementaria de las películas
recomendaciones = modelo.info_movies(df_movies)
print('\nRecomendaciones:')
display(recomendaciones)

# Función que retorna las recomendaciones rankeadas por usuario
recomendaciones_usuario_resultado = recomendaciones_usuario(3070,recomendaciones,15)
print('\nRecomendaciones por usuario:')
display(recomendaciones_usuario_resultado)